[{"/Users/daviddunham/Documents/Documents - David’s MacBook Air/OneDrive/Fullstack Academy/Senior/Stackathon/pages/_app.js":"1","/Users/daviddunham/Documents/Documents - David’s MacBook Air/OneDrive/Fullstack Academy/Senior/Stackathon/pages/index.js":"2","/Users/daviddunham/Documents/Documents - David’s MacBook Air/OneDrive/Fullstack Academy/Senior/Stackathon/components/AllProducts.js":"3","/Users/daviddunham/Documents/Documents - David’s MacBook Air/OneDrive/Fullstack Academy/Senior/Stackathon/components/MyRoutes.js":"4","/Users/daviddunham/Documents/Documents - David’s MacBook Air/OneDrive/Fullstack Academy/Senior/Stackathon/components/NewProduct.js":"5","/Users/daviddunham/Documents/Documents - David’s MacBook Air/OneDrive/Fullstack Academy/Senior/Stackathon/components/ProductTreemap.js":"6","/Users/daviddunham/Documents/Documents - David’s MacBook Air/OneDrive/Fullstack Academy/Senior/Stackathon/components/Treemap.js":"7","/Users/daviddunham/Documents/Documents - David’s MacBook Air/OneDrive/Fullstack Academy/Senior/Stackathon/components/index.js":"8"},{"size":288,"mtime":1647055191121,"results":"9","hashOfConfig":"10"},{"size":345,"mtime":1647056601631,"results":"11","hashOfConfig":"10"},{"size":2678,"mtime":1647054289467,"results":"12","hashOfConfig":"10"},{"size":364,"mtime":1647054289477,"results":"13","hashOfConfig":"10"},{"size":3148,"mtime":1647054289488,"results":"14","hashOfConfig":"10"},{"size":5269,"mtime":1647054289500,"results":"15","hashOfConfig":"10"},{"size":6162,"mtime":1647054289512,"results":"16","hashOfConfig":"10"},{"size":557,"mtime":1647056503953,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},"1wo1ooy",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/daviddunham/Documents/Documents - David’s MacBook Air/OneDrive/Fullstack Academy/Senior/Stackathon/pages/_app.js",["47","48"],[],"import { Provider } from 'react-redux';\nimport { useStore } from '../store';\n\nexport default function App({ Component, pageProps }) {\n  const store = useStore(pageProps.initialReduxState);\n\n  return (\n    <Provider store={store}>\n      <Component {...pageProps} />\n    </Provider>\n  );\n}\n","/Users/daviddunham/Documents/Documents - David’s MacBook Air/OneDrive/Fullstack Academy/Senior/Stackathon/pages/index.js",["49","50","51"],[],"import { AllProducts, NewProduct, ProductTreemap } from '../components';\n\nconst AdminView = () => {\n  return (\n    <div id=\"admin-view\">\n      <h1>Marketplace Analytics</h1>\n      <div id=\"admin-products-display\">\n        <AllProducts />\n        <NewProduct />\n      </div>\n      <ProductTreemap />\n    </div>\n  );\n};\n\nexport default AdminView;\n","/Users/daviddunham/Documents/Documents - David’s MacBook Air/OneDrive/Fullstack Academy/Senior/Stackathon/components/AllProducts.js",[],[],"/Users/daviddunham/Documents/Documents - David’s MacBook Air/OneDrive/Fullstack Academy/Senior/Stackathon/components/MyRoutes.js",["52","53","54","55","56","57"],[],"import React from 'react';\nimport { Route, Routes, Link, BrowserRouter as Router } from 'react-router-dom';\nimport AdminView from './AdminView';\n\nconst MyRoutes = () => {\n  return (\n    <Router>\n      <main>\n        <Routes>\n          <Route exact path=\"/\" element={<AdminView />} />\n        </Routes>\n      </main>\n    </Router>\n  );\n};\n\nexport default MyRoutes;\n","/Users/daviddunham/Documents/Documents - David’s MacBook Air/OneDrive/Fullstack Academy/Senior/Stackathon/components/NewProduct.js",[],[],"/Users/daviddunham/Documents/Documents - David’s MacBook Air/OneDrive/Fullstack Academy/Senior/Stackathon/components/ProductTreemap.js",["58"],[],"import React from 'react';\nimport { connect } from 'react-redux';\nimport { setProducts } from '../redux/products';\nimport PropTypes from 'prop-types';\nimport Treemap from './Treemap';\nimport * as d3 from 'd3';\n\nconst productCategories = [\n  'produce',\n  'meats',\n  'dairy',\n  'household',\n  'frozen',\n  'pasta',\n  'seafood',\n  'bakery',\n  'baking',\n  'medical',\n  'office',\n  'spices',\n  'condiments',\n  'bath',\n  'miscellaneous',\n];\n\nfunction cascade(root, offset) {\n  const x = new Map();\n  const y = new Map();\n  return root\n    .eachAfter((d) => {\n      if (d.children) {\n        x.set(\n          d,\n          1 +\n            d3.max(d.children, (c) => (c.x1 === d.x1 - offset ? x.get(c) : NaN))\n        );\n        y.set(\n          d,\n          1 +\n            d3.max(d.children, (c) => (c.y1 === d.y1 - offset ? y.get(c) : NaN))\n        );\n      } else {\n        x.set(d, 0);\n        y.set(d, 0);\n      }\n    })\n    .eachBefore((d) => {\n      d.x1 -= 2 * offset * x.get(d);\n      d.y1 -= 2 * offset * y.get(d);\n    });\n}\n\nconst treemap = (data) =>\n  cascade(\n    d3\n      .treemap()\n      .size([1000, 500])\n      .paddingOuter(3)\n      .paddingTop(19)\n      .paddingInner(1)\n      .round(true)(\n      d3\n        .hierarchy(data)\n        .sum((d) => d.value)\n        .sort((a, b) => b.value - a.value)\n    ),\n    3 // treemap.paddingOuter\n  );\n\nfunction cascadeData(data) {\n  return {\n    name: 'analytics',\n    children: productCategories.map((category) => {\n      return {\n        name: category,\n        children: data.filter((item) => item.category === category),\n      };\n    }),\n  };\n}\n\nfunction chart(data) {\n  const root = treemap(data);\n  const color = d3.scaleSequential([8, 0], d3.interpolateMagma);\n  const format = d3.format(',d');\n\n  const svg = d3\n    .create('svg')\n    .attr('viewBox', [0, 0, 1000, 500])\n    .style('overflow', 'visible')\n    .style('font', '10px sans-serif');\n\n  // const shadow = DOM.uid('shadow');\n\n  svg\n    .append('filter')\n    // .attr('id', shadow.id)\n    .append('feDropShadow')\n    .attr('flood-opacity', 0.3)\n    .attr('dx', 0)\n    .attr('stdDeviation', 3);\n\n  const node = svg\n    .selectAll('g')\n    .data(d3.group(root, (d) => d.height))\n    .join('g')\n    // .attr('filter', shadow)\n    .selectAll('g')\n    .data((d) => d[1])\n    .join('g')\n    .attr('transform', (d) => `translate(${d.x0},${d.y0})`);\n\n  node.append('title').text(\n    (d) =>\n      `${d\n        .ancestors()\n        .reverse()\n        .map((d) => d.data.name)\n        .join('/')}\\n${format(d.value)}`\n  );\n\n  node\n    .append('rect')\n    // .attr('id', (d) => (d.nodeUid = DOM.uid('node')).id)\n    .attr('fill', (d) => color(d.height))\n    .attr('width', (d) => d.x1 - d.x0)\n    .attr('height', (d) => d.y1 - d.y0);\n\n  node\n    .append('clipPath')\n    // .attr('id', (d) => (d.clipUid = DOM.uid('clip')).id)\n    .append('use')\n    .attr('xlink:href', (d) => d.nodeUid.href);\n\n  node\n    .append('text')\n    .attr('clip-path', (d) => d.clipUid)\n    .selectAll('tspan')\n    .data((d) => d.data.name.split(/(?=[A-Z][^A-Z])/g).concat(format(d.value)))\n    .join('tspan')\n    .attr('fill-opacity', (d, i, nodes) =>\n      i === nodes.length - 1 ? 0.7 : null\n    )\n    .text((d) => d);\n\n  node\n    .filter((d) => d.children)\n    .selectAll('tspan')\n    .attr('dx', 3)\n    .attr('y', 13);\n\n  node\n    .filter((d) => !d.children)\n    .selectAll('tspan')\n    .attr('x', 3)\n    .attr(\n      'y',\n      (d, i, nodes) => `${(i === nodes.length - 1) * 0.3 + 1.1 + i * 0.9}em`\n    );\n\n  return svg.node();\n}\n\nclass ProductTreemap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loading = true;\n    this.createTree = this.createTree.bind(this);\n  }\n\n  createTree() {\n    let data =\n      this.props.products && this.props.products.length > 0\n        ? this.props.products\n        : [{ id: 0, name: 'Loading', category: 'Loading', quantity: 1 }];\n    const chartNode = Treemap(data, {\n      path: (d) => d.name,\n      value: (d) => d?.quantity,\n      group: (d) => d.category,\n      label: (d) => [d.name, d.quantity.toString()].join('\\n'),\n      width: 1000,\n      height: 500,\n    });\n\n    // CLEAR ANY PREVIOUS CHARTS\n    const app = document.getElementById('app');\n    const prevCharts = document.querySelectorAll('svg');\n    if (prevCharts) {\n      for (let prevChart of prevCharts) {\n        app.removeChild(prevChart);\n      }\n    }\n\n    // INSERT STANDARD TREEMAP\n    app.appendChild(chartNode);\n\n    // INSERT CASCADED TREEMAP\n    // data = cascadeData(data);\n    // app.appendChild(chart(data));\n  }\n\n  componentDidMount() {\n    this.props.setProducts();\n    this.loading = false;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.products !== this.props.products) {\n      this.loading = false; // Not sure what to put here.\n    }\n  }\n\n  render() {\n    this.createTree();\n    return this.loading ? <h1>LOADING</h1> : <div>{/* <Tree /> */}</div>;\n  }\n}\n\nProductTreemap.propTypes = {\n  products: PropTypes.array,\n  setProducts: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    products: state.products,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setProducts: () => dispatch(setProducts()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductTreemap);\n","/Users/daviddunham/Documents/Documents - David’s MacBook Air/OneDrive/Fullstack Academy/Senior/Stackathon/components/Treemap.js",["59"],[],"import * as d3 from 'd3';\n\n// Copyright 2021 Observable, Inc.\n// Released under the ISC license.\n// https://observablehq.com/@d3/treemap\nexport default function Treemap(\n  data,\n  {\n    // data is either tabular (array of objects) or hierarchy (nested objects)\n    path, // as an alternative to id and parentId, returns an array identifier, imputing internal nodes\n    id = Array.isArray(data) ? (d) => d.id : null, // if tabular data, given a d in data, returns a unique identifier (string)\n    parentId = Array.isArray(data) ? (d) => d.parentId : null, // if tabular data, given a node d, returns its parent’s identifier\n    children, // if hierarchical data, given a d in data, returns its children\n    value, // given a node d, returns a quantitative value (for area encoding; null for count)\n    sort = (a, b) => d3.descending(a.value, b.value), // how to sort nodes prior to layout\n    label, // given a leaf node d, returns the name to display on the rectangle\n    group, // given a leaf node d, returns a categorical value (for color encoding)\n    title, // given a leaf node d, returns its hover text\n    link, // given a leaf node d, its link (if any)\n    linkTarget = '_blank', // the target attribute for links (if any)\n    tile = d3.treemapBinary, // treemap strategy\n    width = 640, // outer width, in pixels\n    height = 400, // outer height, in pixels\n    margin = 0, // shorthand for margins\n    marginTop = margin, // top margin, in pixels\n    marginRight = margin, // right margin, in pixels\n    marginBottom = margin, // bottom margin, in pixels\n    marginLeft = margin, // left margin, in pixels\n    padding = 1, // shorthand for inner and outer padding\n    paddingInner = padding, // to separate a node from its adjacent siblings\n    paddingOuter = padding, // shorthand for top, right, bottom, and left padding\n    paddingTop = paddingOuter, // to separate a node’s top edge from its children\n    paddingRight = paddingOuter, // to separate a node’s right edge from its children\n    paddingBottom = paddingOuter, // to separate a node’s bottom edge from its children\n    paddingLeft = paddingOuter, // to separate a node’s left edge from its children\n    round = true, // whether to round to exact pixels\n    colors = d3.schemeTableau10, // array of colors\n    zDomain, // array of values for the color scale\n    fill = '#ccc', // fill for node rects (if no group color encoding)\n    fillOpacity = group == null ? null : 0.6, // fill opacity for node rects\n    stroke, // stroke for node rects\n    strokeWidth, // stroke width for node rects\n    strokeOpacity, // stroke opacity for node rects\n    strokeLinejoin, // stroke line join for node rects\n  } = {}\n) {\n  // If id and parentId options are specified, or the path option, use d3.stratify\n  // to convert tabular data to a hierarchy; otherwise we assume that the data is\n  // specified as an object {children} with nested objects (a.k.a. the “flare.json”\n  // format), and use d3.hierarchy.\n  const root =\n    path != null\n      ? d3.stratify().path(path)(data)\n      : id != null || parentId != null\n      ? d3.stratify().id(id).parentId(parentId)(data)\n      : d3.hierarchy(data, children);\n\n  // Compute the values of internal nodes by aggregating from the leaves.\n  value == null ? root.count() : root.sum((d) => Math.max(0, value(d)));\n\n  // Prior to sorting, if a group channel is specified, construct an ordinal color scale.\n  const leaves = root.leaves();\n  const G = group == null ? null : leaves.map((d) => group(d.data, d));\n  if (zDomain === undefined) zDomain = G;\n  zDomain = new d3.InternSet(zDomain);\n  const color = group == null ? null : d3.scaleOrdinal(zDomain, colors);\n\n  // Compute labels and titles.\n  const L = label == null ? null : leaves.map((d) => label(d.data, d));\n  const T =\n    title === undefined\n      ? L\n      : title == null\n      ? null\n      : leaves.map((d) => title(d.data, d));\n\n  // Sort the leaves (typically by descending value for a pleasing layout).\n  if (sort != null) root.sort(sort);\n\n  // Compute the treemap layout.\n  d3\n    .treemap()\n    .tile(tile)\n    .size([width - marginLeft - marginRight, height - marginTop - marginBottom])\n    .paddingInner(paddingInner)\n    .paddingTop(paddingTop)\n    .paddingRight(paddingRight)\n    .paddingBottom(paddingBottom)\n    .paddingLeft(paddingLeft)\n    .round(round)(root);\n\n  const svg = d3\n    .create('svg')\n    .attr('viewBox', [-marginLeft, -marginTop, width, height])\n    .attr('width', width)\n    .attr('height', height)\n    .attr('style', 'max-width: 100%; height: auto; height: intrinsic;')\n    .attr('font-family', 'sans-serif')\n    .attr('font-size', 10);\n\n  const node = svg\n    .selectAll('a')\n    .data(leaves)\n    .join('a')\n    .attr('xlink:href', link == null ? null : (d, i) => link(d.data, d))\n    .attr('target', link == null ? null : linkTarget)\n    .attr('transform', (d) => `translate(${d.x0},${d.y0})`);\n\n  node\n    .append('rect')\n    .attr('fill', color ? (d, i) => color(G[i]) : fill)\n    .attr('fill-opacity', fillOpacity)\n    .attr('stroke', stroke)\n    .attr('stroke-width', strokeWidth)\n    .attr('stroke-opacity', strokeOpacity)\n    .attr('stroke-linejoin', strokeLinejoin)\n    .attr('width', (d) => d.x1 - d.x0)\n    .attr('height', (d) => d.y1 - d.y0);\n\n  if (T) {\n    node.append('title').text((d, i) => T[i]);\n  }\n\n  if (L) {\n    // A unique identifier for clip paths (to avoid conflicts).\n    const uid = `O-${Math.random().toString(16).slice(2)}`;\n\n    node\n      .append('clipPath')\n      .attr('id', (d, i) => `${uid}-clip-${i}`)\n      .append('rect')\n      .attr('width', (d) => d.x1 - d.x0)\n      .attr('height', (d) => d.y1 - d.y0);\n\n    node\n      .append('text')\n      .attr(\n        'clip-path',\n        (d, i) => `url(${new URL(`#${uid}-clip-${i}`, location)})`\n      )\n      .selectAll('tspan')\n      .data((d, i) => `${L[i]}`.split(/\\n/g))\n      .join('tspan')\n      .attr('x', 3)\n      .attr('y', (d, i, D) => `${(i === D.length - 1) * 0.3 + 1.1 + i * 0.9}em`)\n      .attr('fill-opacity', (d, i, D) => (i === D.length - 1 ? 0.7 : null))\n      .text((d) => d);\n  }\n\n  return Object.assign(svg.node(), { scales: { color } });\n}\n","/Users/daviddunham/Documents/Documents - David’s MacBook Air/OneDrive/Fullstack Academy/Senior/Stackathon/components/index.js",[],[],{"ruleId":"60","severity":2,"message":"61","line":1,"column":10,"nodeType":"62","messageId":"63","endLine":1,"endColumn":18},{"ruleId":"60","severity":2,"message":"64","line":4,"column":31,"nodeType":"62","messageId":"63","endLine":4,"endColumn":40},{"ruleId":"60","severity":2,"message":"65","line":1,"column":10,"nodeType":"62","messageId":"63","endLine":1,"endColumn":21},{"ruleId":"60","severity":2,"message":"66","line":1,"column":23,"nodeType":"62","messageId":"63","endLine":1,"endColumn":33},{"ruleId":"60","severity":2,"message":"67","line":1,"column":35,"nodeType":"62","messageId":"63","endLine":1,"endColumn":49},{"ruleId":"60","severity":2,"message":"68","line":1,"column":8,"nodeType":"62","messageId":"63","endLine":1,"endColumn":13},{"ruleId":"60","severity":2,"message":"69","line":2,"column":10,"nodeType":"62","messageId":"63","endLine":2,"endColumn":15},{"ruleId":"60","severity":2,"message":"70","line":2,"column":17,"nodeType":"62","messageId":"63","endLine":2,"endColumn":23},{"ruleId":"60","severity":2,"message":"71","line":2,"column":25,"nodeType":"62","messageId":"63","endLine":2,"endColumn":29},{"ruleId":"60","severity":2,"message":"72","line":2,"column":48,"nodeType":"62","messageId":"63","endLine":2,"endColumn":54},{"ruleId":"60","severity":2,"message":"73","line":3,"column":8,"nodeType":"62","messageId":"63","endLine":3,"endColumn":17},{"ruleId":null,"fatal":true,"severity":2,"message":"74","line":178,"column":23},{"ruleId":"60","severity":2,"message":"75","line":105,"column":51,"nodeType":"62","messageId":"63","endLine":105,"endColumn":52},"no-unused-vars","'Provider' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'AllProducts' is defined but never used.","'NewProduct' is defined but never used.","'ProductTreemap' is defined but never used.","'React' is defined but never used.","'Route' is defined but never used.","'Routes' is defined but never used.","'Link' is defined but never used.","'Router' is defined but never used.","'AdminView' is defined but never used.","Parsing error: Unexpected token .","'i' is defined but never used."]